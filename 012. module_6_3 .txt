import random

class Animal:
    live = True
    sound = None
    _DEGREE_OF_DANGER = 0

    def __init__(self, speed):
        self._cords = [0, 0, 0]
        self.speed = speed


    def move(self, dx, dy, dz):
        if dz >= 0:
            self._cords = [dx*self.speed, dy*self.speed, dz*self.speed]
        else:
            print("It's too deep, i can't dive")

    def get_cords(self):
        print(f"X: {self._cords[0]}, Y: {self._cords[1]}, Z: {self._cords[2]}")

    def attack(self):

        a = 0 # в ней будет храниться уровень опасности
        # Проходим по MRO:
        for cls in self.__class__.mro():
            if hasattr(cls, '_DEGREE_OF_DANGER'): # проверяет есть ли в данном классе атрибут
                b = cls._DEGREE_OF_DANGER
                if b > a:
                    a = b

        if a < 5:
            print("Sorry, I'm peaceful :)")
        else:
            print(f"Be careful, I'm attacking you 0_0")

    def speak(self):
        print(self.sound)


class Bird(Animal): # птица
    beak = True # наличие клюва

    def lay_eggs(self):
        print(f"Here are(is) {random.randint(1, 4)} eggs for you")

class AquaticAnimal(Animal): # плавающее животное
    _DEGREE_OF_DANGER = 3

    def dive_in(self, dz):
        self._cords[2] = self._cords[2]-dz*(self.speed/2)

class PoisonousAnimal(Animal): # ядовитые животные
    _DEGREE_OF_DANGER = 8

class Duckbill(Bird, AquaticAnimal, PoisonousAnimal):
    def __init__(self, speed):
        self.sound = "Click-click-click"
        super().__init__(speed)




db = Duckbill(10)

print(db.live)
print(db.beak)

db.speak()
db.attack()

db.move(1, 2, 3)
db.get_cords()
db.dive_in(6)
db.get_cords()

db.lay_eggs()